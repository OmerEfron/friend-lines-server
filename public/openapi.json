{
  "openapi": "3.0.0",
  "info": {
    "title": "Friend Lines API",
    "description": "A social networking API for friends, groups, and newsflashes with push notifications",
    "version": "1.0.0",
    "contact": {
      "name": "Friend Lines Team",
      "url": "https://friend-lines-server.onrender.com"
    }
  },
  "servers": [
    {
      "url": "https://friend-lines-server.onrender.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/api/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check if the server is running and healthy",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number"
                    },
                    "environment": {
                      "type": "string",
                      "example": "production"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "summary": "Register User",
        "description": "Create a new user account",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "fullName", "email", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "example": "newuser"
                  },
                  "fullName": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "New User"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "newuser@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "securepassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User Login",
        "description": "Authenticate a user and receive access token and refresh token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "yourusername"
                  },
                  "password": {
                    "type": "string",
                    "example": "yourpassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token (expires in 15 minutes)"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "HTTP-only cookie containing refresh token",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=uuid; HttpOnly; Secure; SameSite=Strict; Max-Age=604800"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "summary": "Refresh Access Token",
        "description": "Get new access token using refresh token from HTTP-only cookie",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "accessToken": {
                          "type": "string",
                          "description": "New JWT access token"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "New HTTP-only cookie containing refresh token",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "User Logout",
        "description": "Logout user and revoke refresh token",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Clear refresh token cookie",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=; HttpOnly; Secure; SameSite=Strict; Max-Age=0"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "summary": "Get Current User",
        "description": "Get current user profile information",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "summary": "Get User Profile",
        "description": "Get current user profile information",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/api/users/search": {
      "get": {
        "summary": "Search Users",
        "description": "Search for users by username, full name, or email",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/api/friendships/request": {
      "post": {
        "summary": "Send Friend Request",
        "description": "Send a friend request to another user",
        "tags": ["Friendships"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["friendId"],
                "properties": {
                  "friendId": {
                    "type": "string",
                    "description": "UUID of the user to send request to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Friend request sent successfully"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/api/newsflashes/create": {
      "post": {
        "summary": "Create Newsflash",
        "description": "Create a new newsflash",
        "tags": ["Newsflashes"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content", "targetType"],
                "properties": {
                  "content": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Newsflash content"
                  },
                  "targetType": {
                    "type": "string",
                    "enum": ["friends", "group"],
                    "description": "Who can see this newsflash"
                  },
                  "targetId": {
                    "type": "string",
                    "description": "Group ID if targetType is 'group'"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newsflash created successfully"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/api/notifications/register": {
      "post": {
        "summary": "Register Device",
        "description": "Register device for push notifications",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["deviceToken"],
                "properties": {
                  "deviceToken": {
                    "type": "string",
                    "description": "FCM device token"
                  },
                  "platform": {
                    "type": "string",
                    "enum": ["ios", "android", "web"],
                    "default": "android",
                    "description": "Device platform"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device registered successfully"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/api/notifications/history": {
      "get": {
        "summary": "Get Notification History",
        "description": "Get notification history for the current user",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notification history retrieved successfully"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT access token obtained from /api/auth/login (expires in 15 minutes)"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "username": {
            "type": "string",
            "description": "Unique username"
          },
          "fullName": {
            "type": "string",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "description": "Items per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of items"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Server health and status endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Authentication",
      "description": "User authentication endpoints"
    },
    {
      "name": "Friendships",
      "description": "Friend management endpoints"
    },
    {
      "name": "Groups",
      "description": "Group management endpoints"
    },
    {
      "name": "Newsflashes",
      "description": "Newsflash management endpoints"
    },
    {
      "name": "Notifications",
      "description": "Push notification endpoints"
    }
  ]
}
